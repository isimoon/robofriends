{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gOAuCeA,EArCF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAMJ,EAAOK,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAMF,GACN,2BAAKC,MCiCMK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAInB,OACC,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACxB,OACC,kBAAC,EAAD,CACCC,IAAQJ,EAAOG,GAAGR,GAClBA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCjBRW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCmBKC,E,kDArBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBQQ,aCyFZC,G,wDAhFd,aAAe,IAAD,8BACb,gBAcFC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACZnB,OAAQ,GACR6B,YAAa,IAJD,E,gEAQM,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAQhC,IAAD,EACsBb,KAAKJ,MAA5BnB,EADC,EACDA,OAAQ6B,EADP,EACOA,YACTQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAErD,OAASxC,EAAO0C,OAGf,yBAAK9C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQqC,OAPtB,2C,GA1BgBZ,cCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.339f9736.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\t\t\n\t\t<div className='tc bg-light-green dib vr3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt={ name } src={`https://robohash.org/${id}?200x200`} /> \n\t\t\t<div>\n\t\t\t\t<h2>{ name }</h2>\n\t\t\t\t<p>{ email }</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n// const Card = (props) => {\n// \tconst { name, email, id } = props;\n// \treturn (\t\t\n// \t\t<div className='tc bg-light-green dib vr3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='davidPhoto' src={`https://robohash.org/${id}?200x200`} /> \n// \t\t\t<div>\n// \t\t\t\t<h2>{ name }</h2>\n// \t\t\t\t<p>{ email }</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n// const Card = (props) => {\n// \treturn (\t\t\n// \t\t<div className='tc bg-light-green dib vr3 pa3 ma2 grow bw2 shadow-5'>\n// \t\t\t<img alt='davidPhoto' src={`https://robohash.org/${props.id}?200x200`} /> \n// \t\t\t<div>\n// \t\t\t\t<h2>{ props.name }</h2>\n// \t\t\t\t<p>{ props.email }</p>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// const CardList = ({ robots }) => {\n// \tconst cardArray = robots.map((user, i) => {\n// \t\treturn <Card \n// \t\t\t\tkey = { robots[i].id } \n// \t\t\t\tid={robots[i].id} \n// \t\t\t\tname={robots[i].name} \n// \t\t\t\temail={robots[i].email}\n// \t\t\t\t/> //cuando haces un loop es importante poner un key para minimizar el trabajo que tiene que hacer el DOM si ese elemento desaparece (para que lo identifique y no tenga que renderizar el DOM entero otra vez). Lo ideal es que tuviera algo que no cambiase. En este ejemplo hemos puesto i, pero lo ideal es que fuese id\n// \t});\n// \treturn (\t\t\n// \t\t<div>\n//             {cardArray}\n//     \t</div>\n// \t);\n// }\n\nconst CardList = ({ robots }) => {\n\t// if (true) {\n\t// \tthrow new Error('NOOOOOO');\n\t// } ESTO ES PARA DEMOTRAR EL ERROR BOUNDRY\n\treturn (\t\t\n\t\t<div>\n        \t{\n\t        \trobots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey = { robots[i].id } \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t); \n\t\t\t\t})\n\t\t\t}\n    \t</div>\n\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React , { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\ncomponentDidCatch(error, info) {\n\tthis.setState({ hasError: true })\n}\n\nrender() {\n\tif (this.state.hasError) {\n\t\treturn <h1>Oooops. That is not good</h1>\n\t}\n\treturn this.props.children\n\t}\n}\n\n\n\nexport default ErrorBoundry;","// import React from 'react';\nimport React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'; \n// import { robots } from './robots';\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [], \n\t\t\tsearchfield: '', \n\t\t}\n\t}\n\ncomponentDidMount() {\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => {this.setState({ robots: users})});\n}\n\n\nonSearchChange = (event) => {\n\tthis.setState({ searchfield: event.target.value })\n}\n\nrender() {\n\tconst {robots, searchfield} = this.state;\n\tconst filteredRobots = robots.filter(robot => { \n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase()); \n\t})\n\t\treturn (!robots.length) ?\n\t\t<h1>loading</h1> :\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\t\n\t\t);\n\t}\t\n}\n\n// if (robots.length === 0){\n// \t\treturn <h1>loading</h1>\n// \t} else {\n// \t\treturn (\n// \t\t\t<div className='tc'>\n// \t\t\t\t<h1 className='f1'>Robofriends</h1>\n// \t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n// \t\t\t\t<Scroll>\n// \t\t\t\t\t<CardList robots={filteredRobots} />\n// \t\t\t\t</Scroll>\n// \t\t\t</div>\t\n// \t\t\t);\n// \t\t}\n// \t}\t\n// }\n\n// { const filteredRobots = this.state.robots.filter(robot => {\n//also si no estuviese el const = this.state sería this-state.searchfield\n\n// class App extends Component {\n// \tconstructor() {\n// \t\tsuper()\n// \t\tthis.state = {\n// \t\t\trobots: robots, \n// \t\t\tsearchfield: '', \n// \t\t}\n// \t}\n\n// const App = () => {\n// \treturn (\n// \t\t<div className='tc'>\n// \t\t\t<h1>Robofriends</h1>\n// \t\t\t<SearchBox />\n// \t\t\t<CardList robots={robots} />\n// \t\t</div>\t\n// \t);\n// }\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}